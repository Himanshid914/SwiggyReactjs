{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartItems = {\n  restaurantName: \"\",\n  restaurant_id: \"\",\n  areaName: \"\",\n  logo: \"\",\n  items: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cartItems\n  },\n  reducers: {\n    // state points to our items array/map, action contains the data to modified.\n    assignBasicDetails: (state, action) => {\n      state.cartItems.restaurantName = action.payload.resName;\n      state.cartItems.restaurant_id = action.payload.restaurant_id;\n      state.cartItems.areaName = action.payload.areaname;\n      state.cartItems.logo = action.payload.logo;\n    },\n    addItem: (state, action) => {\n      const item = action.payload;\n      const itemPresent = state.cartItems.items.find(i => i.id === item.id);\n      if (itemPresent) {\n        itemPresent.quantity += 1;\n      } else {\n        state.cartItems.items.push(item);\n      }\n    },\n    removeItem: (state, action) => {\n      // write logic to search action payload in state and remove that.\n      const item = action.payload;\n      const index = state.cartItems.items.findIndex(i => i.id === item.id);\n      if (index !== -1) {\n        if (state.cartItems.items[index].quantity > 1) {\n          state.cartItems.items[index].quantity -= 1;\n        } else if (state.cartItems.items[index].quantity == 1) {\n          state.cartItems.items.splice(index, 1);\n        }\n      }\n    },\n    clearCart: state => {\n      state.cartItems.restaurantName = \"\";\n      state.cartItems.restaurant_id = \"\";\n      state.cartItems.areaName = \"\";\n      state.cartItems.logo = \"\";\n      state.cartItems.items = [];\n    }\n  }\n});\nexport const {\n  assignBasicDetails,\n  addItem,\n  removeItem,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n\n/**\n * The process of creating redux store\n * \n * Create store using configureStore imported from RTK\n *  - Create Slices\n *      - Cart Slice\n *          - Create using createSlice imported from RTK\n *          - contains {\n *              name: cart,\n *              intialState: { items: []},\n *              reducers: {\n *                  contains actions\n *                  addItems: (state, action) => {modifies the state(items) by action payload}\n *                  removeItems:\n *                  clearCart:\n *              }\n *          }\n *          export it to be used in redux store, \n *          - reducers are exported by default, cartSlice.reducer\n *          - actions are exported by name(many), const {addItem, removeItem} = cartSlice.actions\n * \n *      - User Slice\n *          - Create userSlice using createSlice imported from RTK\n *          - it takes an object: {\n *                  name: 'user',\n *                  initialState: {\n *                      email: \"\",\n *                   },\n *                  reducers: {\n *                      setUser(state, action){},\n *                      clearUser(state, action){}\n *                  }\n *              }\n *          - export, actions using named export\n *          - export reducer by default.\n *  - configure in redux store\n *      - import the slice, reducers come by dedfault\n *      - reducer: {\n *          sliceName: slice\n *          cart: cartSlice,\n *          user: userSlice,\n *        }\n * \n * \n *  - Subscribe to the redux store to update our cart: using useSelector hook imported from react-redux\n *      - useSelector(store.sliceName.items)\n \n    - Dispatch an action: addItem, removeItem\n        - dispatch(action)\n        - dispatch(addItem(\"id of item or what needed\"))\n        - dispatch comes from a hook useDispatch which is imported from react-redux\n\n*/","map":{"version":3,"names":["createSlice","cartItems","restaurantName","restaurant_id","areaName","logo","items","cartSlice","name","initialState","reducers","assignBasicDetails","state","action","payload","resName","areaname","addItem","item","itemPresent","find","i","id","quantity","push","removeItem","index","findIndex","splice","clearCart","actions","reducer"],"sources":["/Users/himanshi/Desktop/swiggyreact/src/utils/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartItems = {\n  restaurantName: \"\",\n  restaurant_id: \"\",\n  areaName: \"\",\n  logo: \"\",\n  items: [],\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cartItems,\n  },\n  reducers: {\n    // state points to our items array/map, action contains the data to modified.\n    assignBasicDetails: (state, action) => {\n      state.cartItems.restaurantName = action.payload.resName;\n      state.cartItems.restaurant_id = action.payload.restaurant_id;\n      state.cartItems.areaName = action.payload.areaname;\n      state.cartItems.logo = action.payload.logo;\n    },\n    addItem: (state, action) => {\n      const item = action.payload;\n      const itemPresent = state.cartItems.items.find((i) => i.id === item.id);\n\n      if (itemPresent) {\n        itemPresent.quantity += 1;\n      } else {\n        state.cartItems.items.push(item);\n      }\n    },\n    removeItem: (state, action) => {\n      // write logic to search action payload in state and remove that.\n      const item = action.payload;\n      const index = state.cartItems.items.findIndex((i) => i.id === item.id);\n      if (index !== -1) {\n        if (state.cartItems.items[index].quantity > 1) {\n          state.cartItems.items[index].quantity -= 1;\n        } else if (state.cartItems.items[index].quantity == 1) {\n          state.cartItems.items.splice(index, 1);\n        }\n      }\n    },\n    clearCart: (state) => {\n      (state.cartItems.restaurantName = \"\");\n        (state.cartItems.restaurant_id = \"\");\n        (state.cartItems.areaName = \"\");\n        (state.cartItems.logo = \"\");\n        (state.cartItems.items = []);\n    },\n  },\n});\n\nexport const { assignBasicDetails, addItem, removeItem, clearCart } =\n  cartSlice.actions;\n\nexport default cartSlice.reducer;\n\n/**\n * The process of creating redux store\n * \n * Create store using configureStore imported from RTK\n *  - Create Slices\n *      - Cart Slice\n *          - Create using createSlice imported from RTK\n *          - contains {\n *              name: cart,\n *              intialState: { items: []},\n *              reducers: {\n *                  contains actions\n *                  addItems: (state, action) => {modifies the state(items) by action payload}\n *                  removeItems:\n *                  clearCart:\n *              }\n *          }\n *          export it to be used in redux store, \n *          - reducers are exported by default, cartSlice.reducer\n *          - actions are exported by name(many), const {addItem, removeItem} = cartSlice.actions\n * \n *      - User Slice\n *          - Create userSlice using createSlice imported from RTK\n *          - it takes an object: {\n *                  name: 'user',\n *                  initialState: {\n *                      email: \"\",\n *                   },\n *                  reducers: {\n *                      setUser(state, action){},\n *                      clearUser(state, action){}\n *                  }\n *              }\n *          - export, actions using named export\n *          - export reducer by default.\n *  - configure in redux store\n *      - import the slice, reducers come by dedfault\n *      - reducer: {\n *          sliceName: slice\n *          cart: cartSlice,\n *          user: userSlice,\n *        }\n * \n * \n *  - Subscribe to the redux store to update our cart: using useSelector hook imported from react-redux\n *      - useSelector(store.sliceName.items)\n \n    - Dispatch an action: addItem, removeItem\n        - dispatch(action)\n        - dispatch(addItem(\"id of item or what needed\"))\n        - dispatch comes from a hook useDispatch which is imported from react-redux\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}