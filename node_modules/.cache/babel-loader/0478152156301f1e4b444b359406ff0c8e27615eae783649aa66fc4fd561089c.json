{"ast":null,"code":"import { addItem, removeItem, assignBasicDetails } from \"./cartSlice\";\n\n// Function to filter restaurants when searching.\nexport function filterRestaurants(searchTxt, allRestaurants) {\n  if (searchTxt === \"\") return allRestaurants;\n  const filteredData = allRestaurants.filter(restaurant => {\n    var _restaurant$info, _restaurant$info$name;\n    return restaurant === null || restaurant === void 0 ? void 0 : (_restaurant$info = restaurant.info) === null || _restaurant$info === void 0 ? void 0 : (_restaurant$info$name = _restaurant$info.name) === null || _restaurant$info$name === void 0 ? void 0 : _restaurant$info$name.toLowerCase().includes(searchTxt === null || searchTxt === void 0 ? void 0 : searchTxt.toLowerCase());\n    // restaurant?.data?.data?.area?.toLowerCase().includes(searchTxt?.toLowerCase()) )\n  });\n  return filteredData;\n}\n\n// Function to show the quantity of an item in meals page.\nexport const findQuantity = (id, cartItems) => {\n  var _cartItems$items, _cartItems$items$coun, _cartItems$items$coun2;\n  const count = cartItems === null || cartItems === void 0 ? void 0 : (_cartItems$items = cartItems.items) === null || _cartItems$items === void 0 ? void 0 : _cartItems$items.findIndex(i => i.id === id);\n  if (count === undefined) return 0;\n  if ((cartItems === null || cartItems === void 0 ? void 0 : (_cartItems$items$coun = cartItems.items[count]) === null || _cartItems$items$coun === void 0 ? void 0 : _cartItems$items$coun.quantity) === undefined) return 0;\n  return cartItems === null || cartItems === void 0 ? void 0 : (_cartItems$items$coun2 = cartItems.items[count]) === null || _cartItems$items$coun2 === void 0 ? void 0 : _cartItems$items$coun2.quantity;\n};\n\n// Function to be executed when add to cart is called, first checks if there's any restaurant conflict, we can't have orders from two restaurants together, then adds the meal.\nexport const checkAvailability = (cur_id, menu, cartItems, dispatch, myData) => {\n  if (cartItems.items.length == 0) {\n    const details = {\n      resName: myData.name,\n      restaurant_id: myData.id,\n      areaname: myData.areaname,\n      logo: myData.logo\n    };\n    dispatch(assignBasicDetails(details));\n    addMenu(menu, dispatch);\n  } else {\n    if (cur_id != cartItems.restaurant_id) {\n      alert(\"Your Cart contains items from another Restaurant already\");\n      return false;\n    } else {\n      addMenu(menu, dispatch);\n    }\n  }\n  return true;\n};\nconst addMenu = (menu, dispatch) => {\n  const item = {\n    id: menu.id,\n    name: menu.name,\n    price: menu.price,\n    quantity: 1\n  };\n  dispatch(addItem(item));\n};\n\n//remove item from cart\nexport const removeMenu = (menu, cartItems, dispatch) => {\n  const item = {\n    id: menu.id\n  };\n  dispatch(removeItem(item));\n  if (cartItems.items.length == 0) {\n    const details = {\n      resName: \"\",\n      areaname: \"\",\n      logo: \"\"\n    };\n    dispatch(assignBasicDetails(details));\n  }\n};","map":{"version":3,"names":["addItem","removeItem","assignBasicDetails","filterRestaurants","searchTxt","allRestaurants","filteredData","filter","restaurant","_restaurant$info","_restaurant$info$name","info","name","toLowerCase","includes","findQuantity","id","cartItems","_cartItems$items","_cartItems$items$coun","_cartItems$items$coun2","count","items","findIndex","i","undefined","quantity","checkAvailability","cur_id","menu","dispatch","myData","length","details","resName","restaurant_id","areaname","logo","addMenu","alert","item","price","removeMenu"],"sources":["/Users/himanshi/Desktop/swiggyreact/src/utils/utils.js"],"sourcesContent":["import { addItem, removeItem, assignBasicDetails } from \"./cartSlice\";\n\n\n// Function to filter restaurants when searching.\nexport function filterRestaurants(searchTxt, allRestaurants) {\n  if (searchTxt === \"\") return allRestaurants;\n  const filteredData = allRestaurants.filter(\n    (restaurant) => {\n      return restaurant?.info?.name?.toLowerCase().includes(searchTxt?.toLowerCase())\n      // restaurant?.data?.data?.area?.toLowerCase().includes(searchTxt?.toLowerCase()) )\n    }\n  );\n  return filteredData;\n}\n\n// Function to show the quantity of an item in meals page.\nexport const findQuantity = (id, cartItems) => {\n  const count = cartItems?.items?.findIndex((i) => i.id === id);\n  if (count === undefined) return 0;\n  if(cartItems?.items[count]?.quantity === undefined) return 0;\n  return (cartItems?.items[count]?.quantity);\n};\n\n// Function to be executed when add to cart is called, first checks if there's any restaurant conflict, we can't have orders from two restaurants together, then adds the meal.\nexport const checkAvailability = (\n  cur_id,\n  menu,\n  cartItems,\n  dispatch,\n  myData\n) => {\n  if (cartItems.items.length == 0) {\n    const details = {\n      resName: myData.name,\n      restaurant_id: myData.id,\n      areaname: myData.areaname,\n      logo: myData.logo,\n    };\n\n    dispatch(assignBasicDetails(details));\n    addMenu(menu, dispatch);\n  } else {\n    if (cur_id != cartItems.restaurant_id) {\n      alert(\"Your Cart contains items from another Restaurant already\");\n      return false;\n    } else {\n      addMenu(menu, dispatch);\n    }\n  }\n  return true;\n};\n\nconst addMenu = (menu, dispatch) => {\n  const item = { id: menu.id, name: menu.name, price: menu.price, quantity: 1 };\n  dispatch(addItem(item));\n};\n\n//remove item from cart\nexport const removeMenu = (menu, cartItems, dispatch) => {\n  const item = { id: menu.id };\n  dispatch(removeItem(item));\n  if (cartItems.items.length == 0) {\n    const details = { resName: \"\", areaname: \"\", logo: \"\" };\n    dispatch(assignBasicDetails(details));\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}