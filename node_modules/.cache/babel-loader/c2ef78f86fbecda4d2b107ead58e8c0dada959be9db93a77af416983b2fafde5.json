{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";const cartItems={restaurantName:\"\",restaurant_id:\"\",areaName:\"\",logo:\"\",items:[]};const cartSlice=createSlice({name:\"cart\",initialState:{cartItems},reducers:{// state points to our items array/map, action contains the data to modified.\nassignBasicDetails:(state,action)=>{state.cartItems.restaurantName=action.payload.resName;state.cartItems.restaurant_id=action.payload.restaurant_id;state.cartItems.areaName=action.payload.areaname;state.cartItems.logo=action.payload.logo;},addItem:(state,action)=>{const item=action.payload;const itemPresent=state.cartItems.items.find(i=>i.id===item.id);if(itemPresent){itemPresent.quantity+=1;}else{state.cartItems.items.push(item);}},removeItem:(state,action)=>{// write logic to search action payload in state and remove that.\nconst item=action.payload;const index=state.cartItems.items.findIndex(i=>i.id===item.id);if(index!==-1){if(state.cartItems.items[index].quantity>1){state.cartItems.items[index].quantity-=1;}else if(state.cartItems.items[index].quantity===1){state.cartItems.items.splice(index,1);}}},clearCart:state=>{state.cartItems.restaurantName=\"\";state.cartItems.restaurant_id=\"\";state.cartItems.areaName=\"\";state.cartItems.logo=\"\";state.cartItems.items=[];}}});export const{assignBasicDetails,addItem,removeItem,clearCart}=cartSlice.actions;export default cartSlice.reducer;/**\n * The process of creating redux store\n * \n * Create store using configureStore imported from RTK\n *  - Create Slices\n *      - Cart Slice\n *          - Create using createSlice imported from RTK\n *          - contains {\n *              name: cart,\n *              intialState: { items: []},\n *              reducers: {\n *                  contains actions\n *                  addItems: (state, action) => {modifies the state(items) by action payload}\n *                  removeItems:\n *                  clearCart:\n *              }\n *          }\n *          export it to be used in redux store, \n *          - reducers are exported by default, cartSlice.reducer\n *          - actions are exported by name(many), const {addItem, removeItem} = cartSlice.actions\n * \n *      - User Slice\n *          - Create userSlice using createSlice imported from RTK\n *          - it takes an object: {\n *                  name: 'user',\n *                  initialState: {\n *                      email: \"\",\n *                   },\n *                  reducers: {\n *                      setUser(state, action){},\n *                      clearUser(state, action){}\n *                  }\n *              }\n *          - export, actions using named export\n *          - export reducer by default.\n *  - configure in redux store\n *      - import the slice, reducers come by dedfault\n *      - reducer: {\n *          sliceName: slice\n *          cart: cartSlice,\n *          user: userSlice,\n *        }\n * \n * \n *  - Subscribe to the redux store to update our cart: using useSelector hook imported from react-redux\n *      - useSelector(store.sliceName.items)\n \n    - Dispatch an action: addItem, removeItem\n        - dispatch(action)\n        - dispatch(addItem(\"id of item or what needed\"))\n        - dispatch comes from a hook useDispatch which is imported from react-redux\n\n*/","map":{"version":3,"names":["createSlice","cartItems","restaurantName","restaurant_id","areaName","logo","items","cartSlice","name","initialState","reducers","assignBasicDetails","state","action","payload","resName","areaname","addItem","item","itemPresent","find","i","id","quantity","push","removeItem","index","findIndex","splice","clearCart","actions","reducer"],"sources":["/Users/himanshi/Desktop/swiggyreact/src/utils/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartItems = {\n  restaurantName: \"\",\n  restaurant_id: \"\",\n  areaName: \"\",\n  logo: \"\",\n  items: [],\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cartItems,\n  },\n  reducers: {\n    // state points to our items array/map, action contains the data to modified.\n    assignBasicDetails: (state, action) => {\n      state.cartItems.restaurantName = action.payload.resName;\n      state.cartItems.restaurant_id = action.payload.restaurant_id;\n      state.cartItems.areaName = action.payload.areaname;\n      state.cartItems.logo = action.payload.logo;\n    },\n    addItem: (state, action) => {\n      const item = action.payload;\n      const itemPresent = state.cartItems.items.find((i) => i.id === item.id);\n\n      if (itemPresent) {\n        itemPresent.quantity += 1;\n      } else {\n        state.cartItems.items.push(item);\n      }\n    },\n    removeItem: (state, action) => {\n      // write logic to search action payload in state and remove that.\n      const item = action.payload;\n      const index = state.cartItems.items.findIndex((i) => i.id === item.id);\n      if (index !== -1) {\n        if (state.cartItems.items[index].quantity > 1) {\n          state.cartItems.items[index].quantity -= 1;\n        } else if (state.cartItems.items[index].quantity === 1) {\n          state.cartItems.items.splice(index, 1);\n        }\n      }\n    },\n    clearCart: (state) => {\n      (state.cartItems.restaurantName = \"\");\n        (state.cartItems.restaurant_id = \"\");\n        (state.cartItems.areaName = \"\");\n        (state.cartItems.logo = \"\");\n        (state.cartItems.items = []);\n    },\n  },\n});\n\nexport const { assignBasicDetails, addItem, removeItem, clearCart } =\n  cartSlice.actions;\n\nexport default cartSlice.reducer;\n\n/**\n * The process of creating redux store\n * \n * Create store using configureStore imported from RTK\n *  - Create Slices\n *      - Cart Slice\n *          - Create using createSlice imported from RTK\n *          - contains {\n *              name: cart,\n *              intialState: { items: []},\n *              reducers: {\n *                  contains actions\n *                  addItems: (state, action) => {modifies the state(items) by action payload}\n *                  removeItems:\n *                  clearCart:\n *              }\n *          }\n *          export it to be used in redux store, \n *          - reducers are exported by default, cartSlice.reducer\n *          - actions are exported by name(many), const {addItem, removeItem} = cartSlice.actions\n * \n *      - User Slice\n *          - Create userSlice using createSlice imported from RTK\n *          - it takes an object: {\n *                  name: 'user',\n *                  initialState: {\n *                      email: \"\",\n *                   },\n *                  reducers: {\n *                      setUser(state, action){},\n *                      clearUser(state, action){}\n *                  }\n *              }\n *          - export, actions using named export\n *          - export reducer by default.\n *  - configure in redux store\n *      - import the slice, reducers come by dedfault\n *      - reducer: {\n *          sliceName: slice\n *          cart: cartSlice,\n *          user: userSlice,\n *        }\n * \n * \n *  - Subscribe to the redux store to update our cart: using useSelector hook imported from react-redux\n *      - useSelector(store.sliceName.items)\n \n    - Dispatch an action: addItem, removeItem\n        - dispatch(action)\n        - dispatch(addItem(\"id of item or what needed\"))\n        - dispatch comes from a hook useDispatch which is imported from react-redux\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}